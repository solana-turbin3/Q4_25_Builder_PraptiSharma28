/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from '@solana/kit';

export const PREREQS_DISCRIMINATOR = new Uint8Array([
  207, 223, 180, 162, 57, 127, 107, 60,
]);

export function getPrereqsDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(PREREQS_DISCRIMINATOR);
}

export type Prereqs = {
  discriminator: ReadonlyUint8Array;
  github: string;
  key: Address;
};

export type PrereqsArgs = { github: string; key: Address };

export function getPrereqsEncoder(): Encoder<PrereqsArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['github', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['key', getAddressEncoder()],
    ]),
    (value) => ({ ...value, discriminator: PREREQS_DISCRIMINATOR })
  );
}

export function getPrereqsDecoder(): Decoder<Prereqs> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['github', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['key', getAddressDecoder()],
  ]);
}

export function getPrereqsCodec(): Codec<PrereqsArgs, Prereqs> {
  return combineCodec(getPrereqsEncoder(), getPrereqsDecoder());
}

export function decodePrereqs<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Prereqs, TAddress>;
export function decodePrereqs<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Prereqs, TAddress>;
export function decodePrereqs<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Prereqs, TAddress> | MaybeAccount<Prereqs, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getPrereqsDecoder()
  );
}

export async function fetchPrereqs<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Prereqs, TAddress>> {
  const maybeAccount = await fetchMaybePrereqs(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybePrereqs<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Prereqs, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodePrereqs(maybeAccount);
}

export async function fetchAllPrereqs(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Prereqs>[]> {
  const maybeAccounts = await fetchAllMaybePrereqs(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybePrereqs(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Prereqs>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodePrereqs(maybeAccount));
}
